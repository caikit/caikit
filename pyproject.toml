[build-system]
requires = ["setuptools>=60", "setuptools-scm>=8.0"]

[project]
name = "caikit"
dynamic = ["version"]
description = "AI toolkit that enables AI users to consume stable task-specific model APIs and enables AI developers build algorithms and models in a modular/composable framework"
license = {text = "Apache-2.0"}
readme = "README.md"
requires-python = ">=3.8"
classifiers=[
    "License :: OSI Approved :: Apache Software License"
]
dependencies = [
    "alchemy-config>=1.1.1,<2.0.0",
    "alchemy-logging>=1.3.2,<2.0.0",
    "anytree>=2.7.0,<3.0",
    "docstring-parser>=0.14.1,<0.17.0",
    "grpcio>=1.35.0,<2.0,!=1.55.0",
    "ijson>=3.1.4,<3.3.0",
    "importlib-metadata>=6.8.0,<8.0.0",
    "munch>=2.5.0,<5.0",
    "numpy>=1.22.2,<2",
    "protobuf>=3.19.0,<6",
    "psutil>=5,<6",
    "py-to-proto>=0.5.0,<0.6.0,!=0.2.1",
    "PyYAML>=6.0,<7.0",
    "semver>=2.13.0,<4.0",
    "six>=1.16.0,<2.0.0",
    "tqdm>=4.59.0,<5.0.0",
    "werkzeug>=2.3.7,<4.0.0"
]

[project.scripts]

caikit-runtime = "caikit.runtime.__main__:main"
caikit-health-probe = "caikit_health_probe.__main__:main"
caikit-render-interfaces = "caikit.runtime.dump_services:main"

[project.optional-dependencies]

## Runtime Extra Sets ##

runtime-grpc = [
    "grpcio-health-checking>=1.35.0,<2.0",
    "grpcio-reflection>=1.35.0,<2.0",
    "prometheus_client>=0.12.0,<1.0",
    "py-grpc-prometheus>=0.7.0,<0.9",
]

runtime-http = [
    "fastapi[all]>=0.100,<1",
    "requests>=2.28.2,<3",
    "sse-starlette>=1.6.1,<3",
]

# This is only required for HTTP clients
runtime-client = [
    "requests>=2.28.2,<3",
]

interfaces-vision = [
    "pillow>=6.2.1,<11.0"
]

interfaces-ts = [
    "pandas>=1.4.3,<2",
]

interfaces-ts-pyspark = [
    "caikit[interfaces-ts]",
    "pyspark>=3.3,<3.6",
    "pyarrow>=8.0.0,<16"
]

# NOTE: This is "all" from the user perspective, not the dev perspective
all = [
    "caikit[runtime-grpc, runtime-http, runtime-client, interfaces-vision, interfaces-ts]",
]

## Dev Extra Sets ##

dev-test = [
    # NOTE: pytest-asyncio>=0.22 breaks importing with an error about multiple
    #   imports of sample modules
    "pytest-asyncio>=0.21.0,<0.22",
    "pytest-cov>=2.10.1,<6.0",
    "pytest-html>=3.1.1,<5.0",
    "pytest>=6.2.5,<8.0",
    "tls_test_tools>=0.1.1",
    "wheel>=0.38.4",
    "caikit[interfaces-vision, interfaces-ts-pyspark, runtime-client]",
]

dev-docs = [
    "sphinx>=4.0.2,<8.0",
    "sphinx-autoapi>=2.1.0",
    "sphinx-rtd-theme>=1.2.1,<2.1.0",
]

dev-fmt = [
    "ruff==0.4.4",
    "pre-commit>=3.0.4,<4.0",
    "pydeps>=1.12.12,<2",
]

dev-build = [
    "flit==3.9.0",
]

# NOTE: This is a "special" dependency set to allow for compatibility tests with
# older versions of protobuf, therefore, the upper bound on protobuf _must_ remain
# unchanged.
dev-proto3 = [
    "caikit[all-dev]",
    "protobuf>=3.19.0,<3.20",
    "grpcio>=1.35.0,<1.64",
    "grpcio-health-checking>=1.35.0,<1.64",
    "grpcio-reflection>=1.35.0,<1.64",
]

# NOTE: This is "all" from the user and dev perspective
all-dev = [
    "caikit[all, dev-test, dev-docs, dev-fmt, dev-build]"
]

[tool.setuptools.packages.find]
where = [""]
include = ["caikit", "caikit*"]

[tool.setuptools_scm]
write_to = "caikit/_version.py"

[project.urls]
Source = "https://github.com/caikit/caikit"

[tool.pytest.ini_options]
markers = [
    "examples: marks tests as e2e examples (deselect with '-m \"not examples\"')",
    "slow: marks tests requiring pyspark be installed (deselect with '-m \"not slow\"')"
]
filterwarnings = [
    "ignore:distutils Version classes are deprecated.*:DeprecationWarning",
    "ignore:np.find_common_type is deprecated.*:DeprecationWarning",
    "ignore:Converting `np.character` to a dtype is deprecated.*:DeprecationWarning",
]

[tool.ruff]
line-length = 100
target-version = "py38"
exclude = ["caikit/runtime/protobufs/*.py"]


[tool.ruff.lint]
select = [ "E", "F", "UP", "B", "SIM", "I"]
ignore = [
    "UP032", # f-string
    "UP034", # extraneous-parentheses
    # "UP035", # deprecated-import

    ## original errors fromt pylint
    "F403", # unable to detect undefined names
    "I001", # import block unsorted/unformatted
    "E402", # module level import not at top of file
    # "B028", # warnings: no explicit stacklevel keyword argument found
    # "I0001", # raw-checker-failed
    # "I0010", # bad-inline-option
    # "I0011", # locally-disabled
    # "I0013", # file-ignored
    # "I0020", # suppressed-message
    # "I0021", # useless-suppression
    # "I0022", # deprecated-pragma

    ## added messages in caikit
    # "I0023", # use-symbolic-message-instead
    # "C0103", # invalid-name
    # "C0115", # missing-class-docstring
    # "C0114", # missing-module-docstring
    # "C0116", # missing-function-docstring
    # "C0209", # consider-using-f-string
    # "R1710", # inconsistent-return-statements
    # "E1101", # no-member
    # "R0913", # too-many-arguments
    # "R0914", # too-many-locals
    # "R0912", # too-many-branches
    # "R0915", # too-many-statements
    # "R0401", # cyclic-import
    # "R0903", # too-few-public-methods
    # "W0212", # protected-access
    # "W0511", # fixme
    # "W1202", # logging-format-interpolation
    # "E1205", # logging-too-many-args
    # "W0201", # attribute-defined-outside-init
    # "W0223", # abstract-method
    # "W0104", # pointless-statement
    # "C0411", # wrong-import-order
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # imported but unused
    "F403" # unable to detect undefined names
]
"caikit/runtime/service_generation/protoable.py" = [
    "SIM114", # Combine `if` branches using logical `or` operator # TODO: simplify this logic
]
