# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: caikit_runtime.proto
"""Generated protocol buffer code."""
# Third Party
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n\x14\x63\x61ikit_runtime.proto\x12\nhelloworld"*\n\x0cHelloRequest\x12\x11\n\x04name\x18\x01 \x01(\tH\x00\x88\x01\x01\x42\x07\n\x05_name"\x1d\n\nHelloReply\x12\x0f\n\x07message\x18\x01 \x01(\t2R\n\x10SampleLibService\x12>\n\x08SayHello\x12\x18.helloworld.HelloRequest\x1a\x16.helloworld.HelloReply"\x00\x62\x06proto3'
)


_HELLOREQUEST = DESCRIPTOR.message_types_by_name["HelloRequest"]
_HELLOREPLY = DESCRIPTOR.message_types_by_name["HelloReply"]
HelloRequest = _reflection.GeneratedProtocolMessageType(
    "HelloRequest",
    (_message.Message,),
    {
        "DESCRIPTOR": _HELLOREQUEST,
        "__module__": "caikit_runtime_pb2"
        # @@protoc_insertion_point(class_scope:helloworld.HelloRequest)
    },
)
_sym_db.RegisterMessage(HelloRequest)

HelloReply = _reflection.GeneratedProtocolMessageType(
    "HelloReply",
    (_message.Message,),
    {
        "DESCRIPTOR": _HELLOREPLY,
        "__module__": "caikit_runtime_pb2"
        # @@protoc_insertion_point(class_scope:helloworld.HelloReply)
    },
)
_sym_db.RegisterMessage(HelloReply)

_SAMPLELIBSERVICE = DESCRIPTOR.services_by_name["SampleLibService"]
if _descriptor._USE_C_DESCRIPTORS == False:

    DESCRIPTOR._options = None
    _HELLOREQUEST._serialized_start = 36
    _HELLOREQUEST._serialized_end = 78
    _HELLOREPLY._serialized_start = 80
    _HELLOREPLY._serialized_end = 109
    _SAMPLELIBSERVICE._serialized_start = 111
    _SAMPLELIBSERVICE._serialized_end = 193
# @@protoc_insertion_point(module_scope)
